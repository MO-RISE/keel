#!/usr/bin/env python3

import json
import atexit
import logging
import warnings
import argparse
from typing import Any

import zenoh
from fastapi import FastAPI, Body, HTTPException
from fastapi.middleware.cors import CORSMiddleware

logger = logging.getLogger("keelson-rest-api")

session = None

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=False,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.post("/{topic:path}")
def make_query(topic: str, payload: Any = Body(None)):
    logger.debug("Request: %s", payload)

    replies = session.get(topic, zenoh.Queue(), value=payload)

    response_data = []
    for reply in replies:
        try:
            response_data.append((str(reply.ok.key_expr), reply.ok.payload))
        except Exception:
            raise HTTPException(400, reply.err.payload)

    logger.debug("Responses: %s", response_data)

    return response_data


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="rest-api",
        description="A very simplistic rest API for zenoh (only POST) to extend the existing funcitonality in zenohd.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    parser.add_argument("--log-level", type=int, default=logging.INFO)

    parser.add_argument(
        "--connect",
        action="append",
        type=str,
        default=None,
        help="Endpoints to connect to.",
    )

    parser.add_argument(
        "-p",
        "--port",
        type=int,
        required=True,
        help="The port number to run the rest api on.",
    )

    ## Parse arguments and start doing our thing
    args = parser.parse_args()

    # Setup logger
    logging.basicConfig(
        format="%(asctime)s %(levelname)s %(name)s %(message)s", level=args.log_level
    )
    logging.captureWarnings(True)
    warnings.filterwarnings("once")
    zenoh.init_logger()

    ## Construct session
    logging.info("Opening Zenoh session...")
    conf = zenoh.Config()

    if args.connect is not None:
        conf.insert_json5(zenoh.config.CONNECT_KEY, json.dumps(args.connect))
    session = zenoh.open(conf)

    def _on_exit():
        session.close()

    atexit.register(_on_exit)

    # For debugging only
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=args.port)
