#!/usr/bin/env python3

"""
Command line utility tool for transforming between rtsp streams
and RawImage/CompressedImage readings in keelson
"""

# pylint: disable=duplicate-code

import time
import json
import atexit
import logging
import argparse
import warnings
from collections import deque
from threading import Thread, Event
import datetime

import cv2
import numpy
import zenoh
import keelson
from keelson.payloads.RawImage_pb2 import RawImage
from keelson.payloads.CompressedImage_pb2 import CompressedImage

KEELSON_SUBJECT_RAW_IMAGE = "raw_image"
KEELSON_SUBJECT_COMPRESSED_IMAGE = "compressed_image"

MCAP_TO_OPENCV_ENCODINGS = {"jpeg": ".jpg", "webp": ".webp", "png": ".png"}


# pylint: disable=too-many-locals
# pylint: disable=too-many-statements
# pylint: disable=redefined-outer-name
def to_frames(session: zenoh.Session, args: argparse.Namespace):
    """Grabbing individual frames from a RTSP stream and pushing to Zenoh"""
    logging.info("Converting to frames from source url: %s", args.cam_url)

    raw_key = keelson.construct_pub_sub_key(
        realm=args.realm,
        entity_id=args.entity_id,
        subject=KEELSON_SUBJECT_RAW_IMAGE,
        source_id=args.source_id,
    )

    compressed_key = keelson.construct_pub_sub_key(
        realm=args.realm,
        entity_id=args.entity_id,
        subject=KEELSON_SUBJECT_COMPRESSED_IMAGE,
        source_id=args.source_id,
    )

    logging.info("on RAW key: %s", raw_key)
    logging.info("on COMPRESSED key: %s", compressed_key)

    # Declaring zenoh publisher
    raw_publisher = session.declare_publisher(
        raw_key,
        priority=zenoh.Priority.INTERACTIVE_HIGH(),
        congestion_control=zenoh.CongestionControl.DROP(),
    )

    # Declaring zenoh publisher
    compressed_publisher = session.declare_publisher(
        compressed_key,
        priority=zenoh.Priority.INTERACTIVE_HIGH(),
        congestion_control=zenoh.CongestionControl.DROP(),
    )

    # Opening a VideoCapture object using the supplied url
    cap = cv2.VideoCapture(args.cam_url)  # pylint: disable=no-member

    fps = cap.get(cv2.CAP_PROP_FPS)  # pylint: disable=no-member
    logging.info("Native framerate of stream: %s", fps)

    buffer = deque(maxlen=1)
    close_down = Event()

    def _capturer():
        while cap.isOpened() and not close_down.is_set():
            ret, img = cap.read()
            ingress_timestamp = time.time_ns()

            if not ret:
                logging.error("No frames returned from the stream. Exiting!")
                return

            logging.info("Got new frame, at time: %d", ingress_timestamp)

            height, width, _ = img.shape
            logging.debug("with height: %d, width: %d", height, width)

            buffer.append((ingress_timestamp, img))

    # Start capture thread
    t = Thread(target=_capturer)
    t.daemon = True
    t.start()

    try:
        previous = time.time()
        while True:
            try:
                ingress_timestamp, img = buffer.pop()
            except IndexError:
                time.sleep(0.01)
                continue

            logging.debug("Processing raw frame")

            height, width, _ = img.shape
            data = img.tobytes()

            width_step = len(data) // height
            logging.debug(
                "Frame total byte length: %d, widthstep: %d", len(data), width_step
            )

            if args.send == "raw":
                logging.debug("Send RAW frame...")
                # Create payload for raw image
                payload = RawImage()
                payload.timestamp.FromNanoseconds(ingress_timestamp)
                if args.frame_id is not None:
                    payload.frame_id = args.frame_id
                payload.width = width
                payload.height = height
                payload.encoding = "bgr8"  # Default in OpenCV
                payload.step = width_step
                payload.data = data

                serialized_payload = payload.SerializeToString()
                envelope = keelson.enclose(serialized_payload)
                raw_publisher.put(envelope)
                logging.debug(f"...published on {raw_key}")

            supported_formats = ["jpeg", "webp", "png"]

            if args.send in supported_formats:
                logging.debug(f"SEND {args.send} frame...")
                _, compressed_img = cv2.imencode(  # pylint: disable=no-member
                    MCAP_TO_OPENCV_ENCODINGS[args.send], img
                )
                compressed_img = numpy.asarray(compressed_img)
                data = compressed_img.tobytes()

                payload = CompressedImage()
                if args.frame_id is not None:
                    payload.frame_id = args.frame_id
                payload.data = data
                payload.format = args.send

                serialized_payload = payload.SerializeToString()
                envelope = keelson.enclose(serialized_payload)
                compressed_publisher.put(envelope)
                logging.debug(f"...published on {compressed_key}")

            if args.save == "raw":
                logging.debug("Saving raw frame...")
                filename = f'{ingress_timestamp}_"bgr8".raw'
                cv2.imwrite(filename, img)

            if args.save in supported_formats:
                logging.debug(f"Saving {args.save} frame...")
                ingress_timestamp_seconds = ingress_timestamp / 1e9
                # Create a datetime object from the timestamp
                ingress_datetime = datetime.datetime.fromtimestamp(
                    ingress_timestamp_seconds
                )
                # Convert the datetime object to an ISO format string
                ingress_iso = ingress_datetime.strftime("%Y-%m-%dT%H%M%S-%fZ%z")
                filename = f"./rec/{ingress_iso}_{args.source_id}.{args.save}"
                cv2.imwrite(filename, img)

            # Doing some calculations to see if we manage to keep up with the framerate
            now = time.time()
            processing_frame_rate = now - previous
            previous = now

            logging.info(
                "Processing framerate: %.2f (%d%% of native)",
                processing_frame_rate,
                100 * (processing_frame_rate / fps),
            )

    except KeyboardInterrupt:
        logging.info("Closing down on user request!")

        logging.debug("Joining capturer thread...")
        close_down.set()
        t.join()

        logging.debug("Done! Good bye :)")


# pylint: disable=notimplemented-raised
# pylint: disable=not-callable
def from_frames():
    """Assembling frames from zenoh to a rtsp stream"""
    raise NotImplemented("This functionality is not yet implmeneted")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="rtsp",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument("--log-level", type=int, default=logging.WARNING)
    parser.add_argument(
        "--connect",
        action="append",
        type=str,
        help="Endpoints to connect to.",
    )

    ## Subcommands
    subparsers = parser.add_subparsers(required=True)

    ## Common parser for all subcommands
    common_parser = argparse.ArgumentParser(add_help=False)
    common_parser.add_argument(
        "-u",
        "--cam-url",
        type=str,
        required=True,
        help="RTSP URL or any other video source that OpenCV can handle",
    )

    to_frames_parser = subparsers.add_parser("to_frames", parents=[common_parser])
    to_frames_parser.add_argument("-r", "--realm", type=str, required=False)
    to_frames_parser.add_argument("-e", "--entity-id", type=str, required=False)
    to_frames_parser.add_argument("-s", "--source-id", type=str, required=False)
    to_frames_parser.add_argument(
        "-f",
        "--frame-id",
        type=str,
        default=None,
        required=False,
        help="Frame ID for Foxglove",
    )
    to_frames_parser.add_argument(
        "-sa",
        "--save",
        choices=["raw", "webp", "jpeg", "png"],
        type=str,
        required=False,
    )
    to_frames_parser.add_argument(
        "-se",
        "--send",
        choices=["raw", "webp", "jpeg", "png"],
        type=str,
        required=False,
    )
    to_frames_parser.set_defaults(func=to_frames)

    from_frames_parser = subparsers.add_parser("from_frames", parents=[common_parser])
    from_frames_parser.add_argument("-k", "--key", type=str, required=False)
    from_frames_parser.set_defaults(func=from_frames)

    ## Parse arguments and start doing our thing
    args = parser.parse_args()

    # Setup logger
    logging.basicConfig(
        format="%(asctime)s %(levelname)s %(name)s %(message)s", level=args.log_level
    )
    logging.captureWarnings(True)
    warnings.filterwarnings("once")

    ## Construct session
    logging.info("Opening Zenoh session...")
    conf = zenoh.Config()

    if args.connect is not None:
        conf.insert_json5(zenoh.config.CONNECT_KEY, json.dumps(args.connect))
    session = zenoh.open(conf)

    def _on_exit():
        session.close()

    atexit.register(_on_exit)

    # Dispatch to correct function
    try:
        args.func(session, args)
    except KeyboardInterrupt:
        logging.info("Program ended due to user request (Ctrl-C)")
