#!/usr/bin/env python3

"""
Command line utility tool for translating RadarDetectionReading messages from an OpenDLV into keelson.
"""
import time
import math
import json
import atexit
import logging
import pathlib
import argparse
import warnings
from functools import lru_cache
from contextlib import contextmanager
import numpy as np
import zenoh
from google.protobuf.json_format import MessageToDict
from typing import Tuple
from pycluon import OD4Session, Envelope as cEnvelope
from pycluon.importer import import_odvd

import keelson
from keelson.payloads.RadarReading_pb2 import RadarSpoke, RadarSweep
from keelson.payloads.PointCloud_pb2 import PointCloud
from keelson.payloads.PackedElementField_pb2 import PackedElementField

KEELSON_SUBJECT_RADAR_SPOKE = "radar_spoke"
KEELSON_SUBJECT_RADAR_SWEEP = "radar_sweep"
KEELSON_SUBJECT_RADAR_POINTS = "point_cloud"

## Import and generate code for message specifications
radar_odvd_path = pathlib.Path(__file__).parent / "radar.odvd"
radar_message_spec = import_odvd(str(radar_odvd_path))


@contextmanager
def ignore(*exceptions):
    try:
        yield
    except exceptions:
        logging.exception("Something went wrong in the listener!")


@lru_cache
def decode_azimuth(spoke_direction: int) -> float:
    """Decode azimuth from integer spoke_direction"""
    return spoke_direction / 4096 * 2 * math.pi




def run(session: zenoh.Session, args: argparse.Namespace):
    spokes = []

    # def polar_to_cartesian(azimuth: float, distances: np.ndarray, weights: np.ndarray) -> Tuple[float, np.ndarray]:
    #     """Map from polar to cartesian coordinates"""
    #     logging.debug("Converting to cartesian for azimuth: %.4f", azimuth)

    #     x = distances * np.cos(np.deg2rad(azimuth))  # pylint: disable=invalid-name
    #     y = distances * np.sin(np.deg2rad(azimuth))  # pylint: disable=invalid-name

    #     points = np.column_stack((y, x))

    #     return azimuth, points, weights

    def put_to_zenoh(subject: str, source_id: str, payload: bytes):
        key = keelson.construct_pub_sub_key(
            realm=args.realm,
            entity_id=args.entity_id,
            subject=subject,
            source_id=source_id,
        )

        envelope = keelson.enclose(payload)
        logging.debug("...enclosed into envelope")

        session.put(
            key,
            envelope,
            priority=zenoh.Priority.INTERACTIVE_LOW(),
            congestion_control=zenoh.CongestionControl.DROP(),
        )
        logging.debug("...published to zenoh!")

    def process_spokes(envelope: cEnvelope):
        """Extract a radar message from the cluon envelope"""
        with ignore(Exception):
            logging.debug("Got envelope from pycluon")

            # Unpacking radar message from OpenDLV
            radar_message = radar_message_spec.opendlv_proxy_RadarDetectionReading()
            radar_message.ParseFromString(envelope.serialized_data)

            logging.debug("Received radar message:")
            logging.debug("%s", MessageToDict(radar_message))

            # Packing it into a keelson keelson message
            spoke = RadarSpoke()
            spoke.timestamp.FromDatetime(envelope.sampled_at)

            spoke.azimuth = decode_azimuth(radar_message.azimuth)
            spoke.range = radar_message.range
            spoke.fields.add(name="intensity", offset=0, type=1)  # UINT8
            spoke.data = radar_message.data

            logging.debug("Putting spoke to zenoh...")
            put_to_zenoh(
                KEELSON_SUBJECT_RADAR_SPOKE,
                envelope.sender_stamp,
                spoke.SerializeToString(),
            )

            # Detect begining of new sweep
            if spokes and (spokes[-1].azimuth > spoke.azimuth):
                logging.debug("New sweep detected, sending previous...")
                # Send the previous, fully populated one
                sweep = RadarSweep()
                sweep.spokes.extend(spokes)

                put_to_zenoh(
                    KEELSON_SUBJECT_RADAR_SWEEP,
                    envelope.sender_stamp,
                    sweep.SerializeToString(),
                )

                # sweep_points = np.empty((0, 2), dtype=np.float64)
                # for spoke_p in spokes:
                #     azimuth, points, weights = polar_to_cartesian(
                #         spoke_p.azimuth, spoke_p.range, spoke_p.data
                #     )
                #     sweep_points = np.concatenate((sweep_points, points), axis=0)

                # point_cloud = PointCloud()
                # point_cloud.timestamp.FromDatetime(envelope.sampled_at)
                # # Zero relative position
                # point_cloud.pose.position.x = 0
                # point_cloud.pose.position.y = 0
                # point_cloud.pose.position.z = 0

                # # Identity quaternion
                # point_cloud.pose.orientation.x = 0
                # point_cloud.pose.orientation.y = 0
                # point_cloud.pose.orientation.z = 0
                # point_cloud.pose.orientation.w = 1

                # # Fields
                # point_cloud.fields.add(name="x", offset=0, type=PackedElementField.NumericType.FLOAT64)
                # point_cloud.fields.add(name="y", offset=8, type=PackedElementField.NumericType.FLOAT64)
            
                # data = sweep_points.tobytes()
                # point_cloud.point_stride = len(data) // len(sweep_points)
                # point_cloud.data = data

                # put_to_zenoh(
                #     KEELSON_SUBJECT_RADAR_POINTS,
                #     envelope.sender_stamp,
                #     point_cloud.SerializeToString(),
                # )

                spokes.clear()

            

            spokes.append(spoke)

    logging.info("Starting to process spokes!")

    # Register triggers
    od4_session = OD4Session(args.cid)
    od4_session.add_data_trigger(1201, process_spokes)

    while True:
        time.sleep(0.1)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="opendlv2radar",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument("--log-level", type=int, default=logging.WARNING)
    parser.add_argument(
        "--connect",
        action="append",
        type=str,
        help="Endpoints to connect to.",
    )

    parser.add_argument("-r", "--realm", type=str, required=True)
    parser.add_argument("-e", "--entity-id", type=str, required=True)
    parser.add_argument("--cid", type=int, default=111)

    ## Parse arguments and start doing our thing
    args = parser.parse_args()

    # Setup logger
    logging.basicConfig(
        format="%(asctime)s %(levelname)s %(name)s %(message)s", level=args.log_level
    )
    logging.captureWarnings(True)
    warnings.filterwarnings("once")

    ## Construct session
    logging.info("Opening Zenoh session...")
    conf = zenoh.Config()

    if args.connect is not None:
        conf.insert_json5(zenoh.config.CONNECT_KEY, json.dumps(args.connect))
    session = zenoh.open(conf)

    def _on_exit():
        session.close()

    atexit.register(_on_exit)

    try:
        run(session, args)
    except KeyboardInterrupt:
        logging.info("Program ended due to user request (Ctrl-C)")
        pass
