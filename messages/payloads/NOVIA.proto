syntax = "proto3";

package val.amoc;

// Inspiration for naming stuff: https://pontos.ri.se/docs#data-format 

import "google/protobuf/timestamp.proto";

// State message on the simulation Exercise 
// Adapted in Simulation.proto
message ExerciseState {
  google.protobuf.Timestamp timestamp_source = 1; // # Shold we call it source_timestamp?? publish can be confused with the time of the message sent time 
  enum State {
    UNKNOWN = 0;
    STOPPED = 1;
    ASSIGNED = 2;
    PLAYING = 3;
    PAUSED = 4;
  }
  State state = 2;
}

// The vessel message
// Adapted in Vessel.proto
message Vessel {
  int64 mmsi = 1;
  int32 imo = 2; // # ADDED:International Maritime Organization number
  enum VesselType {
    UNKNOWN = 0;
    OWN_VESSEL = 1;
    TARGET_VESSEL = 2;
  }
  VesselType type = 3;
}

// # Very good! 
// Adapted in Vessel.proto
message Vessels {
  repeated Vessel vessels = 1;
  google.protobuf.Timestamp source_timestamp = 2;
}

// The measurement message of the vessel 
// This is keelson primitives.proto, but we should always try sending the measurements
// with a timestamp and source along with entity given in the key expression 
message Measurement {
  string name = 1;
  double value = 2;
}
message MeasurementValue {
  int64 mmsi = 1;
  Measurement measurement = 2;
  google.protobuf.Timestamp source_timestamp = 3;
}

// The measurement properties of the vessel
// This is a good way to define the mesurments and their properties!!!!! 
// Adapted in Primitives.proto
message MeasurementProperties {
  enum Unit {
    UNIT_UNSPECIFIED = 0;
    METERS = 1;
    DEGREES = 2;
    KNOTS = 3;
    //CELSIUS = 4;
    // we can add other units
  }
  double min_value = 1;
  double max_value = 2;
  double min_safety_value = 3;
  double max_safety_value = 4;
  Unit units = 5; // # Shold we use a enum for this?
}

// Managed with primitives and entity specific messages 
message MeasurementPropertiesMessage {
  int64 mmsi = 1;
  MeasurementProperties measurement_properties = 2;
  google.protobuf.Timestamp source_timestamp = 3;
}



// The location (GNSS) message of the vessel 
// Adapted in LocationFix.proto (common standard for location measurements in ROS and Foxglove)
// Should we use LOCATION_FIX or POSITION_FIX?
message Location {
  double latitude_unit = 1; // # recomonedation to name: latitude_deggres
  double longitude = 2;
  // # double altitude = 3;
  // # chart_datum = 4; (normaly WGS84)
  enum Quality {
    NO_FIX = 0;
    GPS_FIX = 1;
    DIFFERENTIAL_GPS_FIX = 2;
    PPS_FIX = 3;
    RTK = 4;
    FLOAT_RTK = 5;
    ESTIMATED = 6;
    MANUAL = 7;
    SIMULATION = 8;
    NOT_AVAILABLE = 9;
  }
  Quality quality = 3;
}

message LocationMessage {
  int64 mmsi = 1;
  Location location = 2;
  google.protobuf.Timestamp source_timestamp = 3;
}


// The ALERT heading message of the vessel
// # GOOD!! 
message AlertAcknowledgment {
  string acked_by = 1;
  google.protobuf.Timestamp ack_time = 2;
}

message Alert {
   // Added enums for better type safety
   enum Category {
    CATEGORY_UNSPECIFIED = 0;
    CATEGORY_SAFETY = 1;
    CATEGORY_NAVIGATION = 2;
    CATEGORY_TECHNICAL = 3;
    CATEGORY_FIRE_ALARM = 4;
    // I have to verify the categories (they are not in the standard to documentation)
  }
  
  enum Priority {
    PRIORITY_UNSPECIFIED = 0;
    PRIORITY_NORMAL = 1;
    PRIORITY_CAUTION = 2;
    PRIORITY_WARNING = 3;
    PRIORITY_EMERGENCY = 4;
    // I have to verify the priorities (they are not in the standard to documentation)
  }

  enum AckScheme {
    ACK_UNSPECIFIED = 0;
    ACK_IMMEDIATELY = 1;
    ACK_AUTO = 2;
    ACK_NONE = 3;
    // I have to verify the schemes (they are not in the standard to documentation)
  }

  int32 identifier = 1; // Can we use a time stamp insted?
  string description = 2;
  Category category = 3;  // # Enum? --> Changed to enum
  string source = 4;
  Priority priority = 5;  // # Enum? --> Changed to enum
  AckScheme ack_scheme = 6; // # Enum? --> Changed to enum
  // string ack_by = 7; // # maybe add or make a sub message for ACK?
  // timestamp ack_time = 8; // # maybe add or make a sub message for ACK?
  string audio = 7; // # Should this be a file path or a string fonverted to audio?
  string visual = 8; // # Should this be a file path or can it be setted by just the category and priority?
  AlertAcknowledgment alert_acknowledgment = 9; // # Added
  google.protobuf.Timestamp activation_time = 10; 
  google.protobuf.Timestamp expiration_time = 11; // # Added or should it be a duration? 
}

// # Good!
message Alerts {
  int64 mmsi = 1;
  repeated Alert alerts = 2;
  google.protobuf.Timestamp source_timestamp = 3;
}

// The vessel statics message on fixed properties of the vessel
message VesselStatics {
  enum PropulsionType {
    PROPULSION_TYPE_UNSPECIFIED = 0;
    PROPULSION_TYPE_SINGLE = 1;
    PROPULSION_TYPE_DUAL = 2;
    PROPULSION_TYPE_DIESEL = 3;
    PROPULSION_TYPE_ELECTRIC = 4;
    PROPULSION_TYPE_HYBRID = 5;
  }
  
  string model = 1;  // # Where we should point towards a model file description, could make a public DB with simplified model descriptor?
  int32 rudder_count = 2; // # 0 = no rudder, 1 = single rudder, 2 = dual rudder
  bool rudder_single_mode = 3;  // # combind is more commeon therm if singel input command for dual rudder is used
  int32 propulsion_count = 4; // # 0 = no propulsion, 1 = single propulsion, 2 = dual propulsion
  PropulsionType propulsion_type = 5; // # enum? --> Changed to enum
  int32 bow_thruster_count = 6; // # 0 = no bow thruster, 1 = single bow thruster, 2 = dual bow thruster ...
  int32 stern_thruster_count = 7; // # 0 = no stern thruster, 1 = single stern thruster, 2 = dual stern thruster ...
  int32 gps_count = 8;
  int32 gyrocompass_count = 9;
  int32 magnetic_compass_count = 10;

  // # Vessel cordinate/frame of reference should also be defined for each unit if data exisists 
  // # challange is to alos define origin and orientation of the frame we trying to use the Pose.proto for this 
}

message VesselStaticsMessage {
  int64 mmsi = 1;
  VesselStatics statics = 2;
  google.protobuf.Timestamp source_timestamp = 3;
}



// The AIS vessel message 
// # Good idea to have a AIS message decoded one to one!!! But should we also have a more generic such as Target as 
// # the vessel infromation source coulde be from radar, camera or other system 
message AISVesselStatics {
  string callsign = 1;
  string name = 2;
  int32 type_and_cargo = 3;
  int32 dim_a = 4;
  int32 dim_b = 5;
  int32 dim_c = 6;
  int32 dim_d = 7;
}

message AISVesselStaticsClassA {
  int32 ais_version = 1;  //
  int32 imo_num = 2;
  int32 fix_type = 3;
  int32 eta_month = 4;
  int32 eta_day = 5;
  int32 eta_hour = 6;
  int32 eta_minute = 7;
  float draught = 8;
  string destination = 9;
}

message AISVesselPositionClassA {
  int32 nav_status = 1;
  bool rot_over_range = 2;
  int32 rot_raw = 3;
  float rot = 4;
  int32 special_manoeuvre = 5;
}

message AISVessel {
  int64 mmsi = 1;
  bool class_a = 2;
  bool statics_valid = 3;
  float sog = 4;
  int32 position_accuracy = 5;
  double latitude = 6;
  double longitude = 7;
  float cog = 8;
  int32 true_heading = 9;
  AISVesselStatics statics = 10;
  AISVesselPositionClassA position_class_a = 11;
  AISVesselStaticsClassA statics_class_a = 12;
}

message AISVesselMessage {
  AISVessel ais_vessel = 1;
  google.protobuf.Timestamp source_timestamp = 2;
}

// Added this due to the the comment that all ships/veessels do not have MMSI we should have a unique ID of som sort, 
// maybe primary mmsi adn secondary ID by some random number combined with source tag? 
message VesselIdentifier {
  int64 mmsi = 1;  // Primary identifier
  string secondary_id = 2;  // For vessels without MMSI
  string source = 3;  // Identifier source
}
// The assignment message of the vessel (State of all Station)
message Assignment { // # Renamed to StationAssignment or something? 
  string station_id = 1;
  VesselIdentifier vessel_id = 2; // # As all ships/veessels do not have MMSI we should have a unique ID of som sort, maybe primary mmsi adn secondary ID by some random number combined with source tag? 
  enum State {
    UNKNOWN = 0;
    UNASSIGNED = 1;
    WATCHING = 2; // # Monitoring more common? 
    CONTROLLING = 3;
  }
  State state = 3;
}

message Assignments {
  repeated Assignment assignments = 1;
  google.protobuf.Timestamp source_timestamp = 2;
}

// Autopilot settings message for vessel control
// # Good!!! Should we name all Seettings or Configurations?
// # shoud we use naming sheama of settings_<name> or configuration_<name>?
message SettingsAutopilot {
  bool autopilot_on = 1; // # is it in command of the vessel or just have power?
  string control_mode = 2;
  float course = 3;
  float radius = 4;
  float rot = 5;
  float rudder_limit = 6;
  string rudder_performance = 7;
  string rudder_timing = 8;
  string steering_mode = 9;
}


// All possible vessel-related messages bundled together for a specific MMSI.
// Verry nice vay of combining all the messages in one envelope! :) 
message VesselEnvelope {
  int64 mmsi = 1;
  repeated MeasurementPropertiesMessage measurement_properties_messages = 2;
  repeated MeasurementValue measurement_values = 3;
  AISVesselMessage ais_vessel_message = 4;
  VesselStaticsMessage vessel_statics_message = 5;
  LocationMessage location_message = 6;
  repeated Alerts alerts = 7;
  ExerciseState exercise_state = 8;
  Assignments assignments = 9;
  repeated SettingsAutopilot autopilot_settings = 10;
  google.protobuf.Timestamp source_timestamp = 11;
}


