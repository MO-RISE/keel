syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "LocationFix.proto";

package keelson.compound;

// Compound message for target realtime information
message Target {
  // Timestamp closest to when data was produced
  google.protobuf.Timestamp timestamp = 1;

  // Unique identifier for the target with the keelson network
  // if no mmsi is available, we make one 
  int32 mmsi = 2; 

  DataSource data_source = 3; 

  // Position in WGS84 and target common center coordinates 
  double latitude_degrees = 4;
  double longitude_degrees = 5;

  foxglove.LocationFix position = 6;

  string position_source = 7;

  float speed_over_ground_knots = 8;
  float course_over_ground_knots = 9;
  
  float heading_degrees = 10;
  float rate_of_turn_degrees_per_minute = 11;

  // Closest Point of Approach Range/Time
  float CPA_metres = 12;
  float TCPA_seconds = 13;

  // Bow Cross Range/Time
  float BCR_metres = 14;
  float BCT_seconds = 15;

  // Relative to north
  float bearing_north_degrees = 16;
  float bearing_relative_bow_degrees = 17;
  float distance_metres = 18;

  enum NavigationStatus {
    UNDER_WAY = 0;
    AT_ANCHOR = 1;
    NOT_UNDER_COMMAND = 2;
    RESTRICTED_MANEUVERABILITY = 3;
    CONSTRAINED_BY_DRAUGHT = 4;
    MOORED = 5;
    AGROUND = 6;
    ENGAGED_IN_FISHING = 7;
    UNDER_WAY_SAILING = 8;
    FUTURE_HSC = 9;
    FUTURE_WIG = 10;
    TOWING_ASTERN = 11;
    PUSHING_AHEAD = 12;
    RESERVED_FUTURE_USE = 13;
    AIS_SART = 14;
    UNDEFINED = 15;
  }
  NavigationStatus navigation_status = 19;
  
  string json_str = 99;
}

// Target message is for describing any target/object non realtime information 
// it is metadata about the target or information that is changing slowly max 5 min update rate 
message TargetDescription {

  // Timestamp closes to when data was produced
  google.protobuf.Timestamp timestamp = 1;

  // Source where the data was generated [AIS, Radar, etc.]  
  DataSource data_source = 2;
  
  // Unique identifier for the target with the keelson network
  // if no mmsi is available, we make one 
  int32 mmsi = 3;

  int32 imo = 4;
  string name = 5;
  string callsign = 6;

  // Type of target according to AIS standard + some additional types identifeid by id number over 100  
  enum TargetType {  
    UNKNOWN = 0;
    WIG = 20;
    FISHING = 30;
    TOWING = 31;
    TOWING_LONG = 32; // Towing longer than 200m or wider than 25m
    DREDGING = 33;
    DIVING = 34;
    MILITARY = 35;
    SAILING = 36;
    PLEASURE = 37;
    HSC = 40; // High speed craft
    PILOT = 50;
    SAR = 51; // Search and rescue
    TUG = 52;
    PORT = 53;
    ANTI_POLLUTION = 54; // Anti-pollution equipment
    LAW_ENFORCEMENT = 55;
    MEDICAL = 58;
    PASSENGER = 60; // Passenger, all ships of this type
    CARGO = 70; // Cargo, all ships of this type
    TANKER = 80; // Tanker, all ships of this type
    OTHER = 90; // Other, all ships of this type
  }
  TargetType vessel_type = 7;

  enum PlatformType {
      // Additional types
      SHORE = 0; // Keelson Platform, any kind of shore platform
      SEA = 1; // Keelson Platform, any kind of sea platform
  }
  PlatformType platform_type = 8;

  float length_over_all_meters = 9;
  float width_overl_all_meters = 10;

  // Ship midship center line center point is the 0 for the cordinate system, the high 0 is bottom keel plate
  float draft_meters = 11;
  float height_above_waterline_meters = 12;

  // Cordinate system ISO 8855

  // Ship dimensions outline 2D at the waterline
  float to_bow_meters = 13;
  float to_stern_meters = 14;
  float to_port_meters = 15;
  float to_starboard_meters = 16;

  string departed = 17;
  string destination = 18;

  string estimated_time_of_arrival = 19;
  string acctual_time_of_arrival = 20;
  string estimated_time_of_departure = 21;
  string acctual_time_of_departure = 22;
  
  string json_str = 99;
}


message DataSource {
  // Source where the data was generated [AIS, Radar, etc.]
  enum Source {
    AIS_RADIO = 0;
    AIS_PROVIDER = 1;
    RADAR_MARINE = 2;
    RADAR_ROAD = 3;
    LIDAR = 4;
    CAMERA_RBG = 5;
    CAMERA_MONO = 6;
    CAMERA_IR = 7;
  }
  // If sensor fusion is used, multiple data sources can be used
  repeated Source source = 1;
}
